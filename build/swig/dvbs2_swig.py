# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_dvbs2_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_dvbs2_swig')
    _dvbs2_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dvbs2_swig', [dirname(__file__)])
        except ImportError:
            import _dvbs2_swig
            return _dvbs2_swig
        try:
            _mod = imp.load_module('_dvbs2_swig', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _dvbs2_swig = swig_import_helper()
    del swig_import_helper
else:
    import _dvbs2_swig
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _dvbs2_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _dvbs2_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _dvbs2_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _dvbs2_swig.high_res_timer_epoch()
TRUE = _dvbs2_swig.TRUE
FALSE = _dvbs2_swig.FALSE
BB_HEADER_LENGTH_BITS = _dvbs2_swig.BB_HEADER_LENGTH_BITS
TS_GS_TRANSPORT = _dvbs2_swig.TS_GS_TRANSPORT
TS_GS_GENERIC_PACKETIZED = _dvbs2_swig.TS_GS_GENERIC_PACKETIZED
TS_GS_GENERIC_CONTINUOUS = _dvbs2_swig.TS_GS_GENERIC_CONTINUOUS
TS_GS_RESERVED = _dvbs2_swig.TS_GS_RESERVED
SIS_MIS_SINGLE = _dvbs2_swig.SIS_MIS_SINGLE
SIS_MIS_MULTIPLE = _dvbs2_swig.SIS_MIS_MULTIPLE
CCM = _dvbs2_swig.CCM
ACM = _dvbs2_swig.ACM
ISSYI_ACTIVE = _dvbs2_swig.ISSYI_ACTIVE
ISSYI_NOT_ACTIVE = _dvbs2_swig.ISSYI_NOT_ACTIVE
NPD_ACTIVE = _dvbs2_swig.NPD_ACTIVE
NPD_NOT_ACTIVE = _dvbs2_swig.NPD_NOT_ACTIVE
FRAME_SIZE_NORMAL = _dvbs2_swig.FRAME_SIZE_NORMAL
FRAME_SIZE_MEDIUM = _dvbs2_swig.FRAME_SIZE_MEDIUM
FRAME_SIZE_SHORT = _dvbs2_swig.FRAME_SIZE_SHORT
BCH_CODE_N8 = _dvbs2_swig.BCH_CODE_N8
BCH_CODE_N10 = _dvbs2_swig.BCH_CODE_N10
BCH_CODE_N12 = _dvbs2_swig.BCH_CODE_N12
BCH_CODE_S12 = _dvbs2_swig.BCH_CODE_S12
BCH_CODE_M12 = _dvbs2_swig.BCH_CODE_M12
LDPC_ENCODE_TABLE_LENGTH = _dvbs2_swig.LDPC_ENCODE_TABLE_LENGTH
NORMAL_PUNCTURING = _dvbs2_swig.NORMAL_PUNCTURING
MEDIUM_PUNCTURING = _dvbs2_swig.MEDIUM_PUNCTURING
SHORT_PUNCTURING_SET1 = _dvbs2_swig.SHORT_PUNCTURING_SET1
SHORT_PUNCTURING_SET2 = _dvbs2_swig.SHORT_PUNCTURING_SET2
VLSNR_OFF = _dvbs2_swig.VLSNR_OFF
VLSNR_SET1 = _dvbs2_swig.VLSNR_SET1
VLSNR_SET2 = _dvbs2_swig.VLSNR_SET2
EXTRA_PILOT_SYMBOLS_SET1 = _dvbs2_swig.EXTRA_PILOT_SYMBOLS_SET1
EXTRA_PILOT_SYMBOLS_SET2 = _dvbs2_swig.EXTRA_PILOT_SYMBOLS_SET2
C1_4 = _dvbs2_swig.C1_4
C1_3 = _dvbs2_swig.C1_3
C2_5 = _dvbs2_swig.C2_5
C1_2 = _dvbs2_swig.C1_2
C3_5 = _dvbs2_swig.C3_5
C2_3 = _dvbs2_swig.C2_3
C3_4 = _dvbs2_swig.C3_4
C4_5 = _dvbs2_swig.C4_5
C5_6 = _dvbs2_swig.C5_6
C8_9 = _dvbs2_swig.C8_9
C9_10 = _dvbs2_swig.C9_10
C13_45 = _dvbs2_swig.C13_45
C9_20 = _dvbs2_swig.C9_20
C90_180 = _dvbs2_swig.C90_180
C96_180 = _dvbs2_swig.C96_180
C11_20 = _dvbs2_swig.C11_20
C100_180 = _dvbs2_swig.C100_180
C104_180 = _dvbs2_swig.C104_180
C26_45 = _dvbs2_swig.C26_45
C18_30 = _dvbs2_swig.C18_30
C28_45 = _dvbs2_swig.C28_45
C23_36 = _dvbs2_swig.C23_36
C116_180 = _dvbs2_swig.C116_180
C20_30 = _dvbs2_swig.C20_30
C124_180 = _dvbs2_swig.C124_180
C25_36 = _dvbs2_swig.C25_36
C128_180 = _dvbs2_swig.C128_180
C13_18 = _dvbs2_swig.C13_18
C132_180 = _dvbs2_swig.C132_180
C22_30 = _dvbs2_swig.C22_30
C135_180 = _dvbs2_swig.C135_180
C140_180 = _dvbs2_swig.C140_180
C7_9 = _dvbs2_swig.C7_9
C154_180 = _dvbs2_swig.C154_180
C11_45 = _dvbs2_swig.C11_45
C4_15 = _dvbs2_swig.C4_15
C14_45 = _dvbs2_swig.C14_45
C7_15 = _dvbs2_swig.C7_15
C8_15 = _dvbs2_swig.C8_15
C32_45 = _dvbs2_swig.C32_45
C2_9_VLSNR = _dvbs2_swig.C2_9_VLSNR
C1_5_MEDIUM = _dvbs2_swig.C1_5_MEDIUM
C11_45_MEDIUM = _dvbs2_swig.C11_45_MEDIUM
C1_3_MEDIUM = _dvbs2_swig.C1_3_MEDIUM
C1_5_VLSNR_SF2 = _dvbs2_swig.C1_5_VLSNR_SF2
C11_45_VLSNR_SF2 = _dvbs2_swig.C11_45_VLSNR_SF2
C1_5_VLSNR = _dvbs2_swig.C1_5_VLSNR
C4_15_VLSNR = _dvbs2_swig.C4_15_VLSNR
C1_3_VLSNR = _dvbs2_swig.C1_3_VLSNR
C_OTHER = _dvbs2_swig.C_OTHER
RO_0_35 = _dvbs2_swig.RO_0_35
RO_0_25 = _dvbs2_swig.RO_0_25
RO_0_20 = _dvbs2_swig.RO_0_20
RO_RESERVED = _dvbs2_swig.RO_RESERVED
RO_0_15 = _dvbs2_swig.RO_0_15
RO_0_10 = _dvbs2_swig.RO_0_10
RO_0_05 = _dvbs2_swig.RO_0_05
MOD_QPSK = _dvbs2_swig.MOD_QPSK
MOD_8PSK = _dvbs2_swig.MOD_8PSK
MOD_8APSK = _dvbs2_swig.MOD_8APSK
MOD_16APSK = _dvbs2_swig.MOD_16APSK
MOD_8_8APSK = _dvbs2_swig.MOD_8_8APSK
MOD_32APSK = _dvbs2_swig.MOD_32APSK
MOD_4_12_16APSK = _dvbs2_swig.MOD_4_12_16APSK
MOD_4_8_4_16APSK = _dvbs2_swig.MOD_4_8_4_16APSK
MOD_64APSK = _dvbs2_swig.MOD_64APSK
MOD_8_16_20_20APSK = _dvbs2_swig.MOD_8_16_20_20APSK
MOD_4_12_20_28APSK = _dvbs2_swig.MOD_4_12_20_28APSK
MOD_128APSK = _dvbs2_swig.MOD_128APSK
MOD_256APSK = _dvbs2_swig.MOD_256APSK
MOD_BPSK = _dvbs2_swig.MOD_BPSK
MOD_BPSK_SF2 = _dvbs2_swig.MOD_BPSK_SF2
MOD_OTHER = _dvbs2_swig.MOD_OTHER
PILOTS_OFF = _dvbs2_swig.PILOTS_OFF
PILOTS_ON = _dvbs2_swig.PILOTS_ON
FECFRAME_NORMAL = _dvbs2_swig.FECFRAME_NORMAL
FECFRAME_SHORT = _dvbs2_swig.FECFRAME_SHORT
FECFRAME_MEDIUM = _dvbs2_swig.FECFRAME_MEDIUM
ISSYI_COUNTER = _dvbs2_swig.ISSYI_COUNTER
ISSYI_BUFFSIZE = _dvbs2_swig.ISSYI_BUFFSIZE
ISSYI_BUFFSTAT = _dvbs2_swig.ISSYI_BUFFSTAT
class bbheader_bb(object):
    """Proxy of C++ gr::dvbs2::bbheader_bb class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(framesize, rate, rolloff):
        """make(gr::dvbs2::dvbs2_framesize_t framesize, gr::dvbs2::dvbs2_code_rate_t rate, gr::dvbs2::dvbs2_rolloff_factor_t rolloff) -> bbheader_bb_sptr"""
        return _dvbs2_swig.bbheader_bb_make(framesize, rate, rolloff)

    make = staticmethod(make)
    __swig_destroy__ = _dvbs2_swig.delete_bbheader_bb
    __del__ = lambda self: None
bbheader_bb_swigregister = _dvbs2_swig.bbheader_bb_swigregister
bbheader_bb_swigregister(bbheader_bb)

def bbheader_bb_make(framesize, rate, rolloff):
    """bbheader_bb_make(gr::dvbs2::dvbs2_framesize_t framesize, gr::dvbs2::dvbs2_code_rate_t rate, gr::dvbs2::dvbs2_rolloff_factor_t rolloff) -> bbheader_bb_sptr"""
    return _dvbs2_swig.bbheader_bb_make(framesize, rate, rolloff)

class bbheader_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dvbs2::bbheader_bb)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dvbs2::bbheader_bb)> self) -> bbheader_bb_sptr
        __init__(boost::shared_ptr<(gr::dvbs2::bbheader_bb)> self, bbheader_bb p) -> bbheader_bb_sptr
        """
        this = _dvbs2_swig.new_bbheader_bb_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(bbheader_bb_sptr self) -> bbheader_bb"""
        return _dvbs2_swig.bbheader_bb_sptr___deref__(self)

    __swig_destroy__ = _dvbs2_swig.delete_bbheader_bb_sptr
    __del__ = lambda self: None

    def make(self, framesize, rate, rolloff):
        """make(bbheader_bb_sptr self, gr::dvbs2::dvbs2_framesize_t framesize, gr::dvbs2::dvbs2_code_rate_t rate, gr::dvbs2::dvbs2_rolloff_factor_t rolloff) -> bbheader_bb_sptr"""
        return _dvbs2_swig.bbheader_bb_sptr_make(self, framesize, rate, rolloff)


    def history(self):
        """history(bbheader_bb_sptr self) -> unsigned int"""
        return _dvbs2_swig.bbheader_bb_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(bbheader_bb_sptr self, int which, int delay)
        declare_sample_delay(bbheader_bb_sptr self, unsigned int delay)
        """
        return _dvbs2_swig.bbheader_bb_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(bbheader_bb_sptr self, int which) -> unsigned int"""
        return _dvbs2_swig.bbheader_bb_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(bbheader_bb_sptr self) -> int"""
        return _dvbs2_swig.bbheader_bb_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(bbheader_bb_sptr self) -> double"""
        return _dvbs2_swig.bbheader_bb_sptr_relative_rate(self)


    def start(self):
        """start(bbheader_bb_sptr self) -> bool"""
        return _dvbs2_swig.bbheader_bb_sptr_start(self)


    def stop(self):
        """stop(bbheader_bb_sptr self) -> bool"""
        return _dvbs2_swig.bbheader_bb_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(bbheader_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _dvbs2_swig.bbheader_bb_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(bbheader_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _dvbs2_swig.bbheader_bb_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(bbheader_bb_sptr self) -> int"""
        return _dvbs2_swig.bbheader_bb_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(bbheader_bb_sptr self, int m)"""
        return _dvbs2_swig.bbheader_bb_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(bbheader_bb_sptr self)"""
        return _dvbs2_swig.bbheader_bb_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(bbheader_bb_sptr self) -> bool"""
        return _dvbs2_swig.bbheader_bb_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(bbheader_bb_sptr self, int m)"""
        return _dvbs2_swig.bbheader_bb_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(bbheader_bb_sptr self) -> int"""
        return _dvbs2_swig.bbheader_bb_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(bbheader_bb_sptr self, int i) -> long"""
        return _dvbs2_swig.bbheader_bb_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(bbheader_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(bbheader_bb_sptr self, int port, long max_output_buffer)
        """
        return _dvbs2_swig.bbheader_bb_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(bbheader_bb_sptr self, int i) -> long"""
        return _dvbs2_swig.bbheader_bb_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(bbheader_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(bbheader_bb_sptr self, int port, long min_output_buffer)
        """
        return _dvbs2_swig.bbheader_bb_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(bbheader_bb_sptr self) -> float"""
        return _dvbs2_swig.bbheader_bb_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(bbheader_bb_sptr self) -> float"""
        return _dvbs2_swig.bbheader_bb_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(bbheader_bb_sptr self) -> float"""
        return _dvbs2_swig.bbheader_bb_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(bbheader_bb_sptr self) -> float"""
        return _dvbs2_swig.bbheader_bb_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(bbheader_bb_sptr self) -> float"""
        return _dvbs2_swig.bbheader_bb_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(bbheader_bb_sptr self) -> float"""
        return _dvbs2_swig.bbheader_bb_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(bbheader_bb_sptr self, int which) -> float
        pc_input_buffers_full(bbheader_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.bbheader_bb_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(bbheader_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(bbheader_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.bbheader_bb_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(bbheader_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(bbheader_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.bbheader_bb_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(bbheader_bb_sptr self, int which) -> float
        pc_output_buffers_full(bbheader_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.bbheader_bb_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(bbheader_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(bbheader_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.bbheader_bb_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(bbheader_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(bbheader_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.bbheader_bb_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(bbheader_bb_sptr self) -> float"""
        return _dvbs2_swig.bbheader_bb_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(bbheader_bb_sptr self) -> float"""
        return _dvbs2_swig.bbheader_bb_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(bbheader_bb_sptr self) -> float"""
        return _dvbs2_swig.bbheader_bb_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(bbheader_bb_sptr self) -> float"""
        return _dvbs2_swig.bbheader_bb_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(bbheader_bb_sptr self) -> float"""
        return _dvbs2_swig.bbheader_bb_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(bbheader_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dvbs2_swig.bbheader_bb_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(bbheader_bb_sptr self)"""
        return _dvbs2_swig.bbheader_bb_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(bbheader_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dvbs2_swig.bbheader_bb_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(bbheader_bb_sptr self) -> int"""
        return _dvbs2_swig.bbheader_bb_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(bbheader_bb_sptr self) -> int"""
        return _dvbs2_swig.bbheader_bb_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(bbheader_bb_sptr self, int priority) -> int"""
        return _dvbs2_swig.bbheader_bb_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(bbheader_bb_sptr self) -> std::string"""
        return _dvbs2_swig.bbheader_bb_sptr_name(self)


    def symbol_name(self):
        """symbol_name(bbheader_bb_sptr self) -> std::string"""
        return _dvbs2_swig.bbheader_bb_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(bbheader_bb_sptr self) -> io_signature_sptr"""
        return _dvbs2_swig.bbheader_bb_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(bbheader_bb_sptr self) -> io_signature_sptr"""
        return _dvbs2_swig.bbheader_bb_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(bbheader_bb_sptr self) -> long"""
        return _dvbs2_swig.bbheader_bb_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(bbheader_bb_sptr self) -> basic_block_sptr"""
        return _dvbs2_swig.bbheader_bb_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(bbheader_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _dvbs2_swig.bbheader_bb_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(bbheader_bb_sptr self) -> std::string"""
        return _dvbs2_swig.bbheader_bb_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(bbheader_bb_sptr self, std::string name)"""
        return _dvbs2_swig.bbheader_bb_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(bbheader_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dvbs2_swig.bbheader_bb_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(bbheader_bb_sptr self) -> swig_int_ptr"""
        return _dvbs2_swig.bbheader_bb_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(bbheader_bb_sptr self) -> swig_int_ptr"""
        return _dvbs2_swig.bbheader_bb_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(bbheader_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dvbs2_swig.bbheader_bb_sptr_message_subscribers(self, which_port)

bbheader_bb_sptr_swigregister = _dvbs2_swig.bbheader_bb_sptr_swigregister
bbheader_bb_sptr_swigregister(bbheader_bb_sptr)


bbheader_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
bbheader_bb = bbheader_bb.make;

class bbscrambler_bb(object):
    """Proxy of C++ gr::dvbs2::bbscrambler_bb class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(framesize, rate):
        """make(gr::dvbs2::dvbs2_framesize_t framesize, gr::dvbs2::dvbs2_code_rate_t rate) -> bbscrambler_bb_sptr"""
        return _dvbs2_swig.bbscrambler_bb_make(framesize, rate)

    make = staticmethod(make)
    __swig_destroy__ = _dvbs2_swig.delete_bbscrambler_bb
    __del__ = lambda self: None
bbscrambler_bb_swigregister = _dvbs2_swig.bbscrambler_bb_swigregister
bbscrambler_bb_swigregister(bbscrambler_bb)

def bbscrambler_bb_make(framesize, rate):
    """bbscrambler_bb_make(gr::dvbs2::dvbs2_framesize_t framesize, gr::dvbs2::dvbs2_code_rate_t rate) -> bbscrambler_bb_sptr"""
    return _dvbs2_swig.bbscrambler_bb_make(framesize, rate)

class bbscrambler_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dvbs2::bbscrambler_bb)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dvbs2::bbscrambler_bb)> self) -> bbscrambler_bb_sptr
        __init__(boost::shared_ptr<(gr::dvbs2::bbscrambler_bb)> self, bbscrambler_bb p) -> bbscrambler_bb_sptr
        """
        this = _dvbs2_swig.new_bbscrambler_bb_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(bbscrambler_bb_sptr self) -> bbscrambler_bb"""
        return _dvbs2_swig.bbscrambler_bb_sptr___deref__(self)

    __swig_destroy__ = _dvbs2_swig.delete_bbscrambler_bb_sptr
    __del__ = lambda self: None

    def make(self, framesize, rate):
        """make(bbscrambler_bb_sptr self, gr::dvbs2::dvbs2_framesize_t framesize, gr::dvbs2::dvbs2_code_rate_t rate) -> bbscrambler_bb_sptr"""
        return _dvbs2_swig.bbscrambler_bb_sptr_make(self, framesize, rate)


    def history(self):
        """history(bbscrambler_bb_sptr self) -> unsigned int"""
        return _dvbs2_swig.bbscrambler_bb_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(bbscrambler_bb_sptr self, int which, int delay)
        declare_sample_delay(bbscrambler_bb_sptr self, unsigned int delay)
        """
        return _dvbs2_swig.bbscrambler_bb_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(bbscrambler_bb_sptr self, int which) -> unsigned int"""
        return _dvbs2_swig.bbscrambler_bb_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(bbscrambler_bb_sptr self) -> int"""
        return _dvbs2_swig.bbscrambler_bb_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(bbscrambler_bb_sptr self) -> double"""
        return _dvbs2_swig.bbscrambler_bb_sptr_relative_rate(self)


    def start(self):
        """start(bbscrambler_bb_sptr self) -> bool"""
        return _dvbs2_swig.bbscrambler_bb_sptr_start(self)


    def stop(self):
        """stop(bbscrambler_bb_sptr self) -> bool"""
        return _dvbs2_swig.bbscrambler_bb_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(bbscrambler_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _dvbs2_swig.bbscrambler_bb_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(bbscrambler_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _dvbs2_swig.bbscrambler_bb_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(bbscrambler_bb_sptr self) -> int"""
        return _dvbs2_swig.bbscrambler_bb_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(bbscrambler_bb_sptr self, int m)"""
        return _dvbs2_swig.bbscrambler_bb_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(bbscrambler_bb_sptr self)"""
        return _dvbs2_swig.bbscrambler_bb_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(bbscrambler_bb_sptr self) -> bool"""
        return _dvbs2_swig.bbscrambler_bb_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(bbscrambler_bb_sptr self, int m)"""
        return _dvbs2_swig.bbscrambler_bb_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(bbscrambler_bb_sptr self) -> int"""
        return _dvbs2_swig.bbscrambler_bb_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(bbscrambler_bb_sptr self, int i) -> long"""
        return _dvbs2_swig.bbscrambler_bb_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(bbscrambler_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(bbscrambler_bb_sptr self, int port, long max_output_buffer)
        """
        return _dvbs2_swig.bbscrambler_bb_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(bbscrambler_bb_sptr self, int i) -> long"""
        return _dvbs2_swig.bbscrambler_bb_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(bbscrambler_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(bbscrambler_bb_sptr self, int port, long min_output_buffer)
        """
        return _dvbs2_swig.bbscrambler_bb_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(bbscrambler_bb_sptr self) -> float"""
        return _dvbs2_swig.bbscrambler_bb_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(bbscrambler_bb_sptr self) -> float"""
        return _dvbs2_swig.bbscrambler_bb_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(bbscrambler_bb_sptr self) -> float"""
        return _dvbs2_swig.bbscrambler_bb_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(bbscrambler_bb_sptr self) -> float"""
        return _dvbs2_swig.bbscrambler_bb_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(bbscrambler_bb_sptr self) -> float"""
        return _dvbs2_swig.bbscrambler_bb_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(bbscrambler_bb_sptr self) -> float"""
        return _dvbs2_swig.bbscrambler_bb_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(bbscrambler_bb_sptr self, int which) -> float
        pc_input_buffers_full(bbscrambler_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.bbscrambler_bb_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(bbscrambler_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(bbscrambler_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.bbscrambler_bb_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(bbscrambler_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(bbscrambler_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.bbscrambler_bb_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(bbscrambler_bb_sptr self, int which) -> float
        pc_output_buffers_full(bbscrambler_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.bbscrambler_bb_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(bbscrambler_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(bbscrambler_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.bbscrambler_bb_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(bbscrambler_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(bbscrambler_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.bbscrambler_bb_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(bbscrambler_bb_sptr self) -> float"""
        return _dvbs2_swig.bbscrambler_bb_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(bbscrambler_bb_sptr self) -> float"""
        return _dvbs2_swig.bbscrambler_bb_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(bbscrambler_bb_sptr self) -> float"""
        return _dvbs2_swig.bbscrambler_bb_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(bbscrambler_bb_sptr self) -> float"""
        return _dvbs2_swig.bbscrambler_bb_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(bbscrambler_bb_sptr self) -> float"""
        return _dvbs2_swig.bbscrambler_bb_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(bbscrambler_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dvbs2_swig.bbscrambler_bb_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(bbscrambler_bb_sptr self)"""
        return _dvbs2_swig.bbscrambler_bb_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(bbscrambler_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dvbs2_swig.bbscrambler_bb_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(bbscrambler_bb_sptr self) -> int"""
        return _dvbs2_swig.bbscrambler_bb_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(bbscrambler_bb_sptr self) -> int"""
        return _dvbs2_swig.bbscrambler_bb_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(bbscrambler_bb_sptr self, int priority) -> int"""
        return _dvbs2_swig.bbscrambler_bb_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(bbscrambler_bb_sptr self) -> std::string"""
        return _dvbs2_swig.bbscrambler_bb_sptr_name(self)


    def symbol_name(self):
        """symbol_name(bbscrambler_bb_sptr self) -> std::string"""
        return _dvbs2_swig.bbscrambler_bb_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(bbscrambler_bb_sptr self) -> io_signature_sptr"""
        return _dvbs2_swig.bbscrambler_bb_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(bbscrambler_bb_sptr self) -> io_signature_sptr"""
        return _dvbs2_swig.bbscrambler_bb_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(bbscrambler_bb_sptr self) -> long"""
        return _dvbs2_swig.bbscrambler_bb_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(bbscrambler_bb_sptr self) -> basic_block_sptr"""
        return _dvbs2_swig.bbscrambler_bb_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(bbscrambler_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _dvbs2_swig.bbscrambler_bb_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(bbscrambler_bb_sptr self) -> std::string"""
        return _dvbs2_swig.bbscrambler_bb_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(bbscrambler_bb_sptr self, std::string name)"""
        return _dvbs2_swig.bbscrambler_bb_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(bbscrambler_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dvbs2_swig.bbscrambler_bb_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(bbscrambler_bb_sptr self) -> swig_int_ptr"""
        return _dvbs2_swig.bbscrambler_bb_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(bbscrambler_bb_sptr self) -> swig_int_ptr"""
        return _dvbs2_swig.bbscrambler_bb_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(bbscrambler_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dvbs2_swig.bbscrambler_bb_sptr_message_subscribers(self, which_port)

bbscrambler_bb_sptr_swigregister = _dvbs2_swig.bbscrambler_bb_sptr_swigregister
bbscrambler_bb_sptr_swigregister(bbscrambler_bb_sptr)


bbscrambler_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
bbscrambler_bb = bbscrambler_bb.make;

class bch_bb(object):
    """Proxy of C++ gr::dvbs2::bch_bb class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(framesize, rate):
        """make(gr::dvbs2::dvbs2_framesize_t framesize, gr::dvbs2::dvbs2_code_rate_t rate) -> bch_bb_sptr"""
        return _dvbs2_swig.bch_bb_make(framesize, rate)

    make = staticmethod(make)
    __swig_destroy__ = _dvbs2_swig.delete_bch_bb
    __del__ = lambda self: None
bch_bb_swigregister = _dvbs2_swig.bch_bb_swigregister
bch_bb_swigregister(bch_bb)

def bch_bb_make(framesize, rate):
    """bch_bb_make(gr::dvbs2::dvbs2_framesize_t framesize, gr::dvbs2::dvbs2_code_rate_t rate) -> bch_bb_sptr"""
    return _dvbs2_swig.bch_bb_make(framesize, rate)

class bch_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dvbs2::bch_bb)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dvbs2::bch_bb)> self) -> bch_bb_sptr
        __init__(boost::shared_ptr<(gr::dvbs2::bch_bb)> self, bch_bb p) -> bch_bb_sptr
        """
        this = _dvbs2_swig.new_bch_bb_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(bch_bb_sptr self) -> bch_bb"""
        return _dvbs2_swig.bch_bb_sptr___deref__(self)

    __swig_destroy__ = _dvbs2_swig.delete_bch_bb_sptr
    __del__ = lambda self: None

    def make(self, framesize, rate):
        """make(bch_bb_sptr self, gr::dvbs2::dvbs2_framesize_t framesize, gr::dvbs2::dvbs2_code_rate_t rate) -> bch_bb_sptr"""
        return _dvbs2_swig.bch_bb_sptr_make(self, framesize, rate)


    def history(self):
        """history(bch_bb_sptr self) -> unsigned int"""
        return _dvbs2_swig.bch_bb_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(bch_bb_sptr self, int which, int delay)
        declare_sample_delay(bch_bb_sptr self, unsigned int delay)
        """
        return _dvbs2_swig.bch_bb_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(bch_bb_sptr self, int which) -> unsigned int"""
        return _dvbs2_swig.bch_bb_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(bch_bb_sptr self) -> int"""
        return _dvbs2_swig.bch_bb_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(bch_bb_sptr self) -> double"""
        return _dvbs2_swig.bch_bb_sptr_relative_rate(self)


    def start(self):
        """start(bch_bb_sptr self) -> bool"""
        return _dvbs2_swig.bch_bb_sptr_start(self)


    def stop(self):
        """stop(bch_bb_sptr self) -> bool"""
        return _dvbs2_swig.bch_bb_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(bch_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _dvbs2_swig.bch_bb_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(bch_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _dvbs2_swig.bch_bb_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(bch_bb_sptr self) -> int"""
        return _dvbs2_swig.bch_bb_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(bch_bb_sptr self, int m)"""
        return _dvbs2_swig.bch_bb_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(bch_bb_sptr self)"""
        return _dvbs2_swig.bch_bb_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(bch_bb_sptr self) -> bool"""
        return _dvbs2_swig.bch_bb_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(bch_bb_sptr self, int m)"""
        return _dvbs2_swig.bch_bb_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(bch_bb_sptr self) -> int"""
        return _dvbs2_swig.bch_bb_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(bch_bb_sptr self, int i) -> long"""
        return _dvbs2_swig.bch_bb_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(bch_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(bch_bb_sptr self, int port, long max_output_buffer)
        """
        return _dvbs2_swig.bch_bb_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(bch_bb_sptr self, int i) -> long"""
        return _dvbs2_swig.bch_bb_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(bch_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(bch_bb_sptr self, int port, long min_output_buffer)
        """
        return _dvbs2_swig.bch_bb_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(bch_bb_sptr self) -> float"""
        return _dvbs2_swig.bch_bb_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(bch_bb_sptr self) -> float"""
        return _dvbs2_swig.bch_bb_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(bch_bb_sptr self) -> float"""
        return _dvbs2_swig.bch_bb_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(bch_bb_sptr self) -> float"""
        return _dvbs2_swig.bch_bb_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(bch_bb_sptr self) -> float"""
        return _dvbs2_swig.bch_bb_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(bch_bb_sptr self) -> float"""
        return _dvbs2_swig.bch_bb_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(bch_bb_sptr self, int which) -> float
        pc_input_buffers_full(bch_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.bch_bb_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(bch_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(bch_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.bch_bb_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(bch_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(bch_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.bch_bb_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(bch_bb_sptr self, int which) -> float
        pc_output_buffers_full(bch_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.bch_bb_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(bch_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(bch_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.bch_bb_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(bch_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(bch_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.bch_bb_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(bch_bb_sptr self) -> float"""
        return _dvbs2_swig.bch_bb_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(bch_bb_sptr self) -> float"""
        return _dvbs2_swig.bch_bb_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(bch_bb_sptr self) -> float"""
        return _dvbs2_swig.bch_bb_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(bch_bb_sptr self) -> float"""
        return _dvbs2_swig.bch_bb_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(bch_bb_sptr self) -> float"""
        return _dvbs2_swig.bch_bb_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(bch_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dvbs2_swig.bch_bb_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(bch_bb_sptr self)"""
        return _dvbs2_swig.bch_bb_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(bch_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dvbs2_swig.bch_bb_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(bch_bb_sptr self) -> int"""
        return _dvbs2_swig.bch_bb_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(bch_bb_sptr self) -> int"""
        return _dvbs2_swig.bch_bb_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(bch_bb_sptr self, int priority) -> int"""
        return _dvbs2_swig.bch_bb_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(bch_bb_sptr self) -> std::string"""
        return _dvbs2_swig.bch_bb_sptr_name(self)


    def symbol_name(self):
        """symbol_name(bch_bb_sptr self) -> std::string"""
        return _dvbs2_swig.bch_bb_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(bch_bb_sptr self) -> io_signature_sptr"""
        return _dvbs2_swig.bch_bb_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(bch_bb_sptr self) -> io_signature_sptr"""
        return _dvbs2_swig.bch_bb_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(bch_bb_sptr self) -> long"""
        return _dvbs2_swig.bch_bb_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(bch_bb_sptr self) -> basic_block_sptr"""
        return _dvbs2_swig.bch_bb_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(bch_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _dvbs2_swig.bch_bb_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(bch_bb_sptr self) -> std::string"""
        return _dvbs2_swig.bch_bb_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(bch_bb_sptr self, std::string name)"""
        return _dvbs2_swig.bch_bb_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(bch_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dvbs2_swig.bch_bb_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(bch_bb_sptr self) -> swig_int_ptr"""
        return _dvbs2_swig.bch_bb_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(bch_bb_sptr self) -> swig_int_ptr"""
        return _dvbs2_swig.bch_bb_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(bch_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dvbs2_swig.bch_bb_sptr_message_subscribers(self, which_port)

bch_bb_sptr_swigregister = _dvbs2_swig.bch_bb_sptr_swigregister
bch_bb_sptr_swigregister(bch_bb_sptr)


bch_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
bch_bb = bch_bb.make;

class ldpc_bb(object):
    """Proxy of C++ gr::dvbs2::ldpc_bb class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(framesize, rate, constellation):
        """make(gr::dvbs2::dvbs2_framesize_t framesize, gr::dvbs2::dvbs2_code_rate_t rate, gr::dvbs2::dvbs2_constellation_t constellation) -> ldpc_bb_sptr"""
        return _dvbs2_swig.ldpc_bb_make(framesize, rate, constellation)

    make = staticmethod(make)
    __swig_destroy__ = _dvbs2_swig.delete_ldpc_bb
    __del__ = lambda self: None
ldpc_bb_swigregister = _dvbs2_swig.ldpc_bb_swigregister
ldpc_bb_swigregister(ldpc_bb)

def ldpc_bb_make(framesize, rate, constellation):
    """ldpc_bb_make(gr::dvbs2::dvbs2_framesize_t framesize, gr::dvbs2::dvbs2_code_rate_t rate, gr::dvbs2::dvbs2_constellation_t constellation) -> ldpc_bb_sptr"""
    return _dvbs2_swig.ldpc_bb_make(framesize, rate, constellation)

class ldpc_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dvbs2::ldpc_bb)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dvbs2::ldpc_bb)> self) -> ldpc_bb_sptr
        __init__(boost::shared_ptr<(gr::dvbs2::ldpc_bb)> self, ldpc_bb p) -> ldpc_bb_sptr
        """
        this = _dvbs2_swig.new_ldpc_bb_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(ldpc_bb_sptr self) -> ldpc_bb"""
        return _dvbs2_swig.ldpc_bb_sptr___deref__(self)

    __swig_destroy__ = _dvbs2_swig.delete_ldpc_bb_sptr
    __del__ = lambda self: None

    def make(self, framesize, rate, constellation):
        """make(ldpc_bb_sptr self, gr::dvbs2::dvbs2_framesize_t framesize, gr::dvbs2::dvbs2_code_rate_t rate, gr::dvbs2::dvbs2_constellation_t constellation) -> ldpc_bb_sptr"""
        return _dvbs2_swig.ldpc_bb_sptr_make(self, framesize, rate, constellation)


    def history(self):
        """history(ldpc_bb_sptr self) -> unsigned int"""
        return _dvbs2_swig.ldpc_bb_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(ldpc_bb_sptr self, int which, int delay)
        declare_sample_delay(ldpc_bb_sptr self, unsigned int delay)
        """
        return _dvbs2_swig.ldpc_bb_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(ldpc_bb_sptr self, int which) -> unsigned int"""
        return _dvbs2_swig.ldpc_bb_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(ldpc_bb_sptr self) -> int"""
        return _dvbs2_swig.ldpc_bb_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(ldpc_bb_sptr self) -> double"""
        return _dvbs2_swig.ldpc_bb_sptr_relative_rate(self)


    def start(self):
        """start(ldpc_bb_sptr self) -> bool"""
        return _dvbs2_swig.ldpc_bb_sptr_start(self)


    def stop(self):
        """stop(ldpc_bb_sptr self) -> bool"""
        return _dvbs2_swig.ldpc_bb_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(ldpc_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _dvbs2_swig.ldpc_bb_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(ldpc_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _dvbs2_swig.ldpc_bb_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(ldpc_bb_sptr self) -> int"""
        return _dvbs2_swig.ldpc_bb_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(ldpc_bb_sptr self, int m)"""
        return _dvbs2_swig.ldpc_bb_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ldpc_bb_sptr self)"""
        return _dvbs2_swig.ldpc_bb_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ldpc_bb_sptr self) -> bool"""
        return _dvbs2_swig.ldpc_bb_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(ldpc_bb_sptr self, int m)"""
        return _dvbs2_swig.ldpc_bb_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(ldpc_bb_sptr self) -> int"""
        return _dvbs2_swig.ldpc_bb_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(ldpc_bb_sptr self, int i) -> long"""
        return _dvbs2_swig.ldpc_bb_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ldpc_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(ldpc_bb_sptr self, int port, long max_output_buffer)
        """
        return _dvbs2_swig.ldpc_bb_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(ldpc_bb_sptr self, int i) -> long"""
        return _dvbs2_swig.ldpc_bb_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ldpc_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(ldpc_bb_sptr self, int port, long min_output_buffer)
        """
        return _dvbs2_swig.ldpc_bb_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(ldpc_bb_sptr self) -> float"""
        return _dvbs2_swig.ldpc_bb_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(ldpc_bb_sptr self) -> float"""
        return _dvbs2_swig.ldpc_bb_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ldpc_bb_sptr self) -> float"""
        return _dvbs2_swig.ldpc_bb_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(ldpc_bb_sptr self) -> float"""
        return _dvbs2_swig.ldpc_bb_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(ldpc_bb_sptr self) -> float"""
        return _dvbs2_swig.ldpc_bb_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(ldpc_bb_sptr self) -> float"""
        return _dvbs2_swig.ldpc_bb_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ldpc_bb_sptr self, int which) -> float
        pc_input_buffers_full(ldpc_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.ldpc_bb_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(ldpc_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(ldpc_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.ldpc_bb_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ldpc_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(ldpc_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.ldpc_bb_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ldpc_bb_sptr self, int which) -> float
        pc_output_buffers_full(ldpc_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.ldpc_bb_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(ldpc_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(ldpc_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.ldpc_bb_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ldpc_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(ldpc_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.ldpc_bb_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(ldpc_bb_sptr self) -> float"""
        return _dvbs2_swig.ldpc_bb_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(ldpc_bb_sptr self) -> float"""
        return _dvbs2_swig.ldpc_bb_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(ldpc_bb_sptr self) -> float"""
        return _dvbs2_swig.ldpc_bb_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(ldpc_bb_sptr self) -> float"""
        return _dvbs2_swig.ldpc_bb_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(ldpc_bb_sptr self) -> float"""
        return _dvbs2_swig.ldpc_bb_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(ldpc_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dvbs2_swig.ldpc_bb_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(ldpc_bb_sptr self)"""
        return _dvbs2_swig.ldpc_bb_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(ldpc_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dvbs2_swig.ldpc_bb_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(ldpc_bb_sptr self) -> int"""
        return _dvbs2_swig.ldpc_bb_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(ldpc_bb_sptr self) -> int"""
        return _dvbs2_swig.ldpc_bb_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(ldpc_bb_sptr self, int priority) -> int"""
        return _dvbs2_swig.ldpc_bb_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(ldpc_bb_sptr self) -> std::string"""
        return _dvbs2_swig.ldpc_bb_sptr_name(self)


    def symbol_name(self):
        """symbol_name(ldpc_bb_sptr self) -> std::string"""
        return _dvbs2_swig.ldpc_bb_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(ldpc_bb_sptr self) -> io_signature_sptr"""
        return _dvbs2_swig.ldpc_bb_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(ldpc_bb_sptr self) -> io_signature_sptr"""
        return _dvbs2_swig.ldpc_bb_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(ldpc_bb_sptr self) -> long"""
        return _dvbs2_swig.ldpc_bb_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(ldpc_bb_sptr self) -> basic_block_sptr"""
        return _dvbs2_swig.ldpc_bb_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(ldpc_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _dvbs2_swig.ldpc_bb_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(ldpc_bb_sptr self) -> std::string"""
        return _dvbs2_swig.ldpc_bb_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(ldpc_bb_sptr self, std::string name)"""
        return _dvbs2_swig.ldpc_bb_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(ldpc_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dvbs2_swig.ldpc_bb_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(ldpc_bb_sptr self) -> swig_int_ptr"""
        return _dvbs2_swig.ldpc_bb_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(ldpc_bb_sptr self) -> swig_int_ptr"""
        return _dvbs2_swig.ldpc_bb_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(ldpc_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dvbs2_swig.ldpc_bb_sptr_message_subscribers(self, which_port)

ldpc_bb_sptr_swigregister = _dvbs2_swig.ldpc_bb_sptr_swigregister
ldpc_bb_sptr_swigregister(ldpc_bb_sptr)


ldpc_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ldpc_bb = ldpc_bb.make;

class modulator_bc(object):
    """Proxy of C++ gr::dvbs2::modulator_bc class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(framesize, rate, constellation):
        """make(gr::dvbs2::dvbs2_framesize_t framesize, gr::dvbs2::dvbs2_code_rate_t rate, gr::dvbs2::dvbs2_constellation_t constellation) -> modulator_bc_sptr"""
        return _dvbs2_swig.modulator_bc_make(framesize, rate, constellation)

    make = staticmethod(make)
    __swig_destroy__ = _dvbs2_swig.delete_modulator_bc
    __del__ = lambda self: None
modulator_bc_swigregister = _dvbs2_swig.modulator_bc_swigregister
modulator_bc_swigregister(modulator_bc)

def modulator_bc_make(framesize, rate, constellation):
    """modulator_bc_make(gr::dvbs2::dvbs2_framesize_t framesize, gr::dvbs2::dvbs2_code_rate_t rate, gr::dvbs2::dvbs2_constellation_t constellation) -> modulator_bc_sptr"""
    return _dvbs2_swig.modulator_bc_make(framesize, rate, constellation)

class modulator_bc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dvbs2::modulator_bc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dvbs2::modulator_bc)> self) -> modulator_bc_sptr
        __init__(boost::shared_ptr<(gr::dvbs2::modulator_bc)> self, modulator_bc p) -> modulator_bc_sptr
        """
        this = _dvbs2_swig.new_modulator_bc_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(modulator_bc_sptr self) -> modulator_bc"""
        return _dvbs2_swig.modulator_bc_sptr___deref__(self)

    __swig_destroy__ = _dvbs2_swig.delete_modulator_bc_sptr
    __del__ = lambda self: None

    def make(self, framesize, rate, constellation):
        """make(modulator_bc_sptr self, gr::dvbs2::dvbs2_framesize_t framesize, gr::dvbs2::dvbs2_code_rate_t rate, gr::dvbs2::dvbs2_constellation_t constellation) -> modulator_bc_sptr"""
        return _dvbs2_swig.modulator_bc_sptr_make(self, framesize, rate, constellation)


    def history(self):
        """history(modulator_bc_sptr self) -> unsigned int"""
        return _dvbs2_swig.modulator_bc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(modulator_bc_sptr self, int which, int delay)
        declare_sample_delay(modulator_bc_sptr self, unsigned int delay)
        """
        return _dvbs2_swig.modulator_bc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(modulator_bc_sptr self, int which) -> unsigned int"""
        return _dvbs2_swig.modulator_bc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(modulator_bc_sptr self) -> int"""
        return _dvbs2_swig.modulator_bc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(modulator_bc_sptr self) -> double"""
        return _dvbs2_swig.modulator_bc_sptr_relative_rate(self)


    def start(self):
        """start(modulator_bc_sptr self) -> bool"""
        return _dvbs2_swig.modulator_bc_sptr_start(self)


    def stop(self):
        """stop(modulator_bc_sptr self) -> bool"""
        return _dvbs2_swig.modulator_bc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(modulator_bc_sptr self, unsigned int which_input) -> uint64_t"""
        return _dvbs2_swig.modulator_bc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(modulator_bc_sptr self, unsigned int which_output) -> uint64_t"""
        return _dvbs2_swig.modulator_bc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(modulator_bc_sptr self) -> int"""
        return _dvbs2_swig.modulator_bc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(modulator_bc_sptr self, int m)"""
        return _dvbs2_swig.modulator_bc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(modulator_bc_sptr self)"""
        return _dvbs2_swig.modulator_bc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(modulator_bc_sptr self) -> bool"""
        return _dvbs2_swig.modulator_bc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(modulator_bc_sptr self, int m)"""
        return _dvbs2_swig.modulator_bc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(modulator_bc_sptr self) -> int"""
        return _dvbs2_swig.modulator_bc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(modulator_bc_sptr self, int i) -> long"""
        return _dvbs2_swig.modulator_bc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(modulator_bc_sptr self, long max_output_buffer)
        set_max_output_buffer(modulator_bc_sptr self, int port, long max_output_buffer)
        """
        return _dvbs2_swig.modulator_bc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(modulator_bc_sptr self, int i) -> long"""
        return _dvbs2_swig.modulator_bc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(modulator_bc_sptr self, long min_output_buffer)
        set_min_output_buffer(modulator_bc_sptr self, int port, long min_output_buffer)
        """
        return _dvbs2_swig.modulator_bc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(modulator_bc_sptr self) -> float"""
        return _dvbs2_swig.modulator_bc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(modulator_bc_sptr self) -> float"""
        return _dvbs2_swig.modulator_bc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(modulator_bc_sptr self) -> float"""
        return _dvbs2_swig.modulator_bc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(modulator_bc_sptr self) -> float"""
        return _dvbs2_swig.modulator_bc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(modulator_bc_sptr self) -> float"""
        return _dvbs2_swig.modulator_bc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(modulator_bc_sptr self) -> float"""
        return _dvbs2_swig.modulator_bc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(modulator_bc_sptr self, int which) -> float
        pc_input_buffers_full(modulator_bc_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.modulator_bc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(modulator_bc_sptr self, int which) -> float
        pc_input_buffers_full_avg(modulator_bc_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.modulator_bc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(modulator_bc_sptr self, int which) -> float
        pc_input_buffers_full_var(modulator_bc_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.modulator_bc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(modulator_bc_sptr self, int which) -> float
        pc_output_buffers_full(modulator_bc_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.modulator_bc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(modulator_bc_sptr self, int which) -> float
        pc_output_buffers_full_avg(modulator_bc_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.modulator_bc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(modulator_bc_sptr self, int which) -> float
        pc_output_buffers_full_var(modulator_bc_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.modulator_bc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(modulator_bc_sptr self) -> float"""
        return _dvbs2_swig.modulator_bc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(modulator_bc_sptr self) -> float"""
        return _dvbs2_swig.modulator_bc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(modulator_bc_sptr self) -> float"""
        return _dvbs2_swig.modulator_bc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(modulator_bc_sptr self) -> float"""
        return _dvbs2_swig.modulator_bc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(modulator_bc_sptr self) -> float"""
        return _dvbs2_swig.modulator_bc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(modulator_bc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dvbs2_swig.modulator_bc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(modulator_bc_sptr self)"""
        return _dvbs2_swig.modulator_bc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(modulator_bc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dvbs2_swig.modulator_bc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(modulator_bc_sptr self) -> int"""
        return _dvbs2_swig.modulator_bc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(modulator_bc_sptr self) -> int"""
        return _dvbs2_swig.modulator_bc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(modulator_bc_sptr self, int priority) -> int"""
        return _dvbs2_swig.modulator_bc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(modulator_bc_sptr self) -> std::string"""
        return _dvbs2_swig.modulator_bc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(modulator_bc_sptr self) -> std::string"""
        return _dvbs2_swig.modulator_bc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(modulator_bc_sptr self) -> io_signature_sptr"""
        return _dvbs2_swig.modulator_bc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(modulator_bc_sptr self) -> io_signature_sptr"""
        return _dvbs2_swig.modulator_bc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(modulator_bc_sptr self) -> long"""
        return _dvbs2_swig.modulator_bc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(modulator_bc_sptr self) -> basic_block_sptr"""
        return _dvbs2_swig.modulator_bc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(modulator_bc_sptr self, int ninputs, int noutputs) -> bool"""
        return _dvbs2_swig.modulator_bc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(modulator_bc_sptr self) -> std::string"""
        return _dvbs2_swig.modulator_bc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(modulator_bc_sptr self, std::string name)"""
        return _dvbs2_swig.modulator_bc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(modulator_bc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dvbs2_swig.modulator_bc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(modulator_bc_sptr self) -> swig_int_ptr"""
        return _dvbs2_swig.modulator_bc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(modulator_bc_sptr self) -> swig_int_ptr"""
        return _dvbs2_swig.modulator_bc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(modulator_bc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dvbs2_swig.modulator_bc_sptr_message_subscribers(self, which_port)

modulator_bc_sptr_swigregister = _dvbs2_swig.modulator_bc_sptr_swigregister
modulator_bc_sptr_swigregister(modulator_bc_sptr)


modulator_bc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
modulator_bc = modulator_bc.make;

class physical_cc(object):
    """Proxy of C++ gr::dvbs2::physical_cc class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(framesize, rate, constellation, pilots, goldcode):
        """make(gr::dvbs2::dvbs2_framesize_t framesize, gr::dvbs2::dvbs2_code_rate_t rate, gr::dvbs2::dvbs2_constellation_t constellation, gr::dvbs2::dvbs2_pilots_t pilots, int goldcode) -> physical_cc_sptr"""
        return _dvbs2_swig.physical_cc_make(framesize, rate, constellation, pilots, goldcode)

    make = staticmethod(make)
    __swig_destroy__ = _dvbs2_swig.delete_physical_cc
    __del__ = lambda self: None
physical_cc_swigregister = _dvbs2_swig.physical_cc_swigregister
physical_cc_swigregister(physical_cc)

def physical_cc_make(framesize, rate, constellation, pilots, goldcode):
    """physical_cc_make(gr::dvbs2::dvbs2_framesize_t framesize, gr::dvbs2::dvbs2_code_rate_t rate, gr::dvbs2::dvbs2_constellation_t constellation, gr::dvbs2::dvbs2_pilots_t pilots, int goldcode) -> physical_cc_sptr"""
    return _dvbs2_swig.physical_cc_make(framesize, rate, constellation, pilots, goldcode)

class physical_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dvbs2::physical_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dvbs2::physical_cc)> self) -> physical_cc_sptr
        __init__(boost::shared_ptr<(gr::dvbs2::physical_cc)> self, physical_cc p) -> physical_cc_sptr
        """
        this = _dvbs2_swig.new_physical_cc_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(physical_cc_sptr self) -> physical_cc"""
        return _dvbs2_swig.physical_cc_sptr___deref__(self)

    __swig_destroy__ = _dvbs2_swig.delete_physical_cc_sptr
    __del__ = lambda self: None

    def make(self, framesize, rate, constellation, pilots, goldcode):
        """make(physical_cc_sptr self, gr::dvbs2::dvbs2_framesize_t framesize, gr::dvbs2::dvbs2_code_rate_t rate, gr::dvbs2::dvbs2_constellation_t constellation, gr::dvbs2::dvbs2_pilots_t pilots, int goldcode) -> physical_cc_sptr"""
        return _dvbs2_swig.physical_cc_sptr_make(self, framesize, rate, constellation, pilots, goldcode)


    def history(self):
        """history(physical_cc_sptr self) -> unsigned int"""
        return _dvbs2_swig.physical_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(physical_cc_sptr self, int which, int delay)
        declare_sample_delay(physical_cc_sptr self, unsigned int delay)
        """
        return _dvbs2_swig.physical_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(physical_cc_sptr self, int which) -> unsigned int"""
        return _dvbs2_swig.physical_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(physical_cc_sptr self) -> int"""
        return _dvbs2_swig.physical_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(physical_cc_sptr self) -> double"""
        return _dvbs2_swig.physical_cc_sptr_relative_rate(self)


    def start(self):
        """start(physical_cc_sptr self) -> bool"""
        return _dvbs2_swig.physical_cc_sptr_start(self)


    def stop(self):
        """stop(physical_cc_sptr self) -> bool"""
        return _dvbs2_swig.physical_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(physical_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _dvbs2_swig.physical_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(physical_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _dvbs2_swig.physical_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(physical_cc_sptr self) -> int"""
        return _dvbs2_swig.physical_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(physical_cc_sptr self, int m)"""
        return _dvbs2_swig.physical_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(physical_cc_sptr self)"""
        return _dvbs2_swig.physical_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(physical_cc_sptr self) -> bool"""
        return _dvbs2_swig.physical_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(physical_cc_sptr self, int m)"""
        return _dvbs2_swig.physical_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(physical_cc_sptr self) -> int"""
        return _dvbs2_swig.physical_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(physical_cc_sptr self, int i) -> long"""
        return _dvbs2_swig.physical_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(physical_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(physical_cc_sptr self, int port, long max_output_buffer)
        """
        return _dvbs2_swig.physical_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(physical_cc_sptr self, int i) -> long"""
        return _dvbs2_swig.physical_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(physical_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(physical_cc_sptr self, int port, long min_output_buffer)
        """
        return _dvbs2_swig.physical_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(physical_cc_sptr self) -> float"""
        return _dvbs2_swig.physical_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(physical_cc_sptr self) -> float"""
        return _dvbs2_swig.physical_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(physical_cc_sptr self) -> float"""
        return _dvbs2_swig.physical_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(physical_cc_sptr self) -> float"""
        return _dvbs2_swig.physical_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(physical_cc_sptr self) -> float"""
        return _dvbs2_swig.physical_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(physical_cc_sptr self) -> float"""
        return _dvbs2_swig.physical_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(physical_cc_sptr self, int which) -> float
        pc_input_buffers_full(physical_cc_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.physical_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(physical_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(physical_cc_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.physical_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(physical_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(physical_cc_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.physical_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(physical_cc_sptr self, int which) -> float
        pc_output_buffers_full(physical_cc_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.physical_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(physical_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(physical_cc_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.physical_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(physical_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(physical_cc_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.physical_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(physical_cc_sptr self) -> float"""
        return _dvbs2_swig.physical_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(physical_cc_sptr self) -> float"""
        return _dvbs2_swig.physical_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(physical_cc_sptr self) -> float"""
        return _dvbs2_swig.physical_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(physical_cc_sptr self) -> float"""
        return _dvbs2_swig.physical_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(physical_cc_sptr self) -> float"""
        return _dvbs2_swig.physical_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(physical_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dvbs2_swig.physical_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(physical_cc_sptr self)"""
        return _dvbs2_swig.physical_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(physical_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dvbs2_swig.physical_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(physical_cc_sptr self) -> int"""
        return _dvbs2_swig.physical_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(physical_cc_sptr self) -> int"""
        return _dvbs2_swig.physical_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(physical_cc_sptr self, int priority) -> int"""
        return _dvbs2_swig.physical_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(physical_cc_sptr self) -> std::string"""
        return _dvbs2_swig.physical_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(physical_cc_sptr self) -> std::string"""
        return _dvbs2_swig.physical_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(physical_cc_sptr self) -> io_signature_sptr"""
        return _dvbs2_swig.physical_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(physical_cc_sptr self) -> io_signature_sptr"""
        return _dvbs2_swig.physical_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(physical_cc_sptr self) -> long"""
        return _dvbs2_swig.physical_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(physical_cc_sptr self) -> basic_block_sptr"""
        return _dvbs2_swig.physical_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(physical_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _dvbs2_swig.physical_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(physical_cc_sptr self) -> std::string"""
        return _dvbs2_swig.physical_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(physical_cc_sptr self, std::string name)"""
        return _dvbs2_swig.physical_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(physical_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dvbs2_swig.physical_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(physical_cc_sptr self) -> swig_int_ptr"""
        return _dvbs2_swig.physical_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(physical_cc_sptr self) -> swig_int_ptr"""
        return _dvbs2_swig.physical_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(physical_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dvbs2_swig.physical_cc_sptr_message_subscribers(self, which_port)

physical_cc_sptr_swigregister = _dvbs2_swig.physical_cc_sptr_swigregister
physical_cc_sptr_swigregister(physical_cc_sptr)


physical_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
physical_cc = physical_cc.make;

class interleaver_bb(object):
    """Proxy of C++ gr::dvbs2::interleaver_bb class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(framesize, rate, constellation):
        """make(gr::dvbs2::dvbs2_framesize_t framesize, gr::dvbs2::dvbs2_code_rate_t rate, gr::dvbs2::dvbs2_constellation_t constellation) -> interleaver_bb_sptr"""
        return _dvbs2_swig.interleaver_bb_make(framesize, rate, constellation)

    make = staticmethod(make)
    __swig_destroy__ = _dvbs2_swig.delete_interleaver_bb
    __del__ = lambda self: None
interleaver_bb_swigregister = _dvbs2_swig.interleaver_bb_swigregister
interleaver_bb_swigregister(interleaver_bb)

def interleaver_bb_make(framesize, rate, constellation):
    """interleaver_bb_make(gr::dvbs2::dvbs2_framesize_t framesize, gr::dvbs2::dvbs2_code_rate_t rate, gr::dvbs2::dvbs2_constellation_t constellation) -> interleaver_bb_sptr"""
    return _dvbs2_swig.interleaver_bb_make(framesize, rate, constellation)

class interleaver_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dvbs2::interleaver_bb)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dvbs2::interleaver_bb)> self) -> interleaver_bb_sptr
        __init__(boost::shared_ptr<(gr::dvbs2::interleaver_bb)> self, interleaver_bb p) -> interleaver_bb_sptr
        """
        this = _dvbs2_swig.new_interleaver_bb_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(interleaver_bb_sptr self) -> interleaver_bb"""
        return _dvbs2_swig.interleaver_bb_sptr___deref__(self)

    __swig_destroy__ = _dvbs2_swig.delete_interleaver_bb_sptr
    __del__ = lambda self: None

    def make(self, framesize, rate, constellation):
        """make(interleaver_bb_sptr self, gr::dvbs2::dvbs2_framesize_t framesize, gr::dvbs2::dvbs2_code_rate_t rate, gr::dvbs2::dvbs2_constellation_t constellation) -> interleaver_bb_sptr"""
        return _dvbs2_swig.interleaver_bb_sptr_make(self, framesize, rate, constellation)


    def history(self):
        """history(interleaver_bb_sptr self) -> unsigned int"""
        return _dvbs2_swig.interleaver_bb_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(interleaver_bb_sptr self, int which, int delay)
        declare_sample_delay(interleaver_bb_sptr self, unsigned int delay)
        """
        return _dvbs2_swig.interleaver_bb_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(interleaver_bb_sptr self, int which) -> unsigned int"""
        return _dvbs2_swig.interleaver_bb_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(interleaver_bb_sptr self) -> int"""
        return _dvbs2_swig.interleaver_bb_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(interleaver_bb_sptr self) -> double"""
        return _dvbs2_swig.interleaver_bb_sptr_relative_rate(self)


    def start(self):
        """start(interleaver_bb_sptr self) -> bool"""
        return _dvbs2_swig.interleaver_bb_sptr_start(self)


    def stop(self):
        """stop(interleaver_bb_sptr self) -> bool"""
        return _dvbs2_swig.interleaver_bb_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(interleaver_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _dvbs2_swig.interleaver_bb_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(interleaver_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _dvbs2_swig.interleaver_bb_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(interleaver_bb_sptr self) -> int"""
        return _dvbs2_swig.interleaver_bb_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(interleaver_bb_sptr self, int m)"""
        return _dvbs2_swig.interleaver_bb_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(interleaver_bb_sptr self)"""
        return _dvbs2_swig.interleaver_bb_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(interleaver_bb_sptr self) -> bool"""
        return _dvbs2_swig.interleaver_bb_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(interleaver_bb_sptr self, int m)"""
        return _dvbs2_swig.interleaver_bb_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(interleaver_bb_sptr self) -> int"""
        return _dvbs2_swig.interleaver_bb_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(interleaver_bb_sptr self, int i) -> long"""
        return _dvbs2_swig.interleaver_bb_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(interleaver_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(interleaver_bb_sptr self, int port, long max_output_buffer)
        """
        return _dvbs2_swig.interleaver_bb_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(interleaver_bb_sptr self, int i) -> long"""
        return _dvbs2_swig.interleaver_bb_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(interleaver_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(interleaver_bb_sptr self, int port, long min_output_buffer)
        """
        return _dvbs2_swig.interleaver_bb_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(interleaver_bb_sptr self) -> float"""
        return _dvbs2_swig.interleaver_bb_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(interleaver_bb_sptr self) -> float"""
        return _dvbs2_swig.interleaver_bb_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(interleaver_bb_sptr self) -> float"""
        return _dvbs2_swig.interleaver_bb_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(interleaver_bb_sptr self) -> float"""
        return _dvbs2_swig.interleaver_bb_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(interleaver_bb_sptr self) -> float"""
        return _dvbs2_swig.interleaver_bb_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(interleaver_bb_sptr self) -> float"""
        return _dvbs2_swig.interleaver_bb_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(interleaver_bb_sptr self, int which) -> float
        pc_input_buffers_full(interleaver_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.interleaver_bb_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(interleaver_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(interleaver_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.interleaver_bb_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(interleaver_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(interleaver_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.interleaver_bb_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(interleaver_bb_sptr self, int which) -> float
        pc_output_buffers_full(interleaver_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.interleaver_bb_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(interleaver_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(interleaver_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.interleaver_bb_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(interleaver_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(interleaver_bb_sptr self) -> pmt_vector_float
        """
        return _dvbs2_swig.interleaver_bb_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(interleaver_bb_sptr self) -> float"""
        return _dvbs2_swig.interleaver_bb_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(interleaver_bb_sptr self) -> float"""
        return _dvbs2_swig.interleaver_bb_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(interleaver_bb_sptr self) -> float"""
        return _dvbs2_swig.interleaver_bb_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(interleaver_bb_sptr self) -> float"""
        return _dvbs2_swig.interleaver_bb_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(interleaver_bb_sptr self) -> float"""
        return _dvbs2_swig.interleaver_bb_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(interleaver_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dvbs2_swig.interleaver_bb_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(interleaver_bb_sptr self)"""
        return _dvbs2_swig.interleaver_bb_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(interleaver_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dvbs2_swig.interleaver_bb_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(interleaver_bb_sptr self) -> int"""
        return _dvbs2_swig.interleaver_bb_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(interleaver_bb_sptr self) -> int"""
        return _dvbs2_swig.interleaver_bb_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(interleaver_bb_sptr self, int priority) -> int"""
        return _dvbs2_swig.interleaver_bb_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(interleaver_bb_sptr self) -> std::string"""
        return _dvbs2_swig.interleaver_bb_sptr_name(self)


    def symbol_name(self):
        """symbol_name(interleaver_bb_sptr self) -> std::string"""
        return _dvbs2_swig.interleaver_bb_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(interleaver_bb_sptr self) -> io_signature_sptr"""
        return _dvbs2_swig.interleaver_bb_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(interleaver_bb_sptr self) -> io_signature_sptr"""
        return _dvbs2_swig.interleaver_bb_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(interleaver_bb_sptr self) -> long"""
        return _dvbs2_swig.interleaver_bb_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(interleaver_bb_sptr self) -> basic_block_sptr"""
        return _dvbs2_swig.interleaver_bb_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(interleaver_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _dvbs2_swig.interleaver_bb_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(interleaver_bb_sptr self) -> std::string"""
        return _dvbs2_swig.interleaver_bb_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(interleaver_bb_sptr self, std::string name)"""
        return _dvbs2_swig.interleaver_bb_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(interleaver_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dvbs2_swig.interleaver_bb_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(interleaver_bb_sptr self) -> swig_int_ptr"""
        return _dvbs2_swig.interleaver_bb_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(interleaver_bb_sptr self) -> swig_int_ptr"""
        return _dvbs2_swig.interleaver_bb_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(interleaver_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dvbs2_swig.interleaver_bb_sptr_message_subscribers(self, which_port)

interleaver_bb_sptr_swigregister = _dvbs2_swig.interleaver_bb_sptr_swigregister
interleaver_bb_sptr_swigregister(interleaver_bb_sptr)


interleaver_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
interleaver_bb = interleaver_bb.make;



